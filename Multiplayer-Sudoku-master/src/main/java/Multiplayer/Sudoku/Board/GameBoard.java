package Multiplayer.Sudoku.Board;

/** The GameBoard class creates a game board object for use in both single and multiplayer Sudoku games.
 * A board is generated based on the difficulty selected by the user.
 */
public class GameBoard {

    // array of initial board which can not be changed
    private int[][] initial;
    
    // array that will contain player's numbers 
    private int[][] player;
    
    // array that contains the answer to the sudoku board
    private int[][] answer;

    private int diffLevel;
    
    /** The GameBoard() function sets the initial game board based on the difficulty level
     * selected by the user and sets an answer board that the Sudoku game will be compared 
     * against as the game progresses.
     * @param diffLevel is hte difficulty level for the Sudoku game set by the user.
     */
    public GameBoard(int diffLevel) {

        // get the board generated by Generator class
        initial = Generator.getBoard(diffLevel);

        // get the full grid Sudoku board
        answer = Generator.getFullGrid();
      
        // player's array is initialized as a 9x9 full of zeroes
        player = new int[9][9];

        this.diffLevel = diffLevel;
    }
    
    public int getDiffLevel(){
        return this.diffLevel;
    }

    // get a game board that is made up of NULL values.
    public GameBoard getNullBoard() {
        GameBoard gb = new GameBoard(1);
        
        int[][] nullGrid = new int[10][10];
        for (int i=0; i<9; i++)
            for (int j=0; j<9; j++)
                nullGrid[i][j] = 0;
        gb.initial = nullGrid;
        gb.player = nullGrid;
        gb.answer = nullGrid;
        
        return gb;
    }
            
    // get the initial board
    public int[][] getInitial(){
	    return initial;
    }

    // get player's array
    public int[][] getPlayer(){
	    return player;
    }
    // get answer of the sudoku board
    public int[][] getAnswer(){
        return answer;
    }
    
    // player modify the sudoku board
    public void modifyPlayer(int val, int row, int col){
        // if the cell is empty and,
    	// if the value entered is valid
        if ((initial[row][col] == 0) && (val>=0 && val<=9)) 
            player[row][col]=val;
    }
    /** The checkForSuccess() function compares the gameBoard state to the answer
     * board and determines if the game has been completed successfully. 
     * @return true if the game board matches the answer board, otherwise
     * return false.
     */
    public boolean checkForSuccess() {
        boolean[] check = new boolean[81];
        int[][] com = getFullSudokuBoard();

        return validColumns(com, check) && 
               validRows(com, check)    && 
               validCells(com, check);
    }

    /** The getFullSedokuBoard() function 
     * 
     * @return
     */
    public int[][] getFullSudokuBoard() {
        int[][] merged_results = new int[9][9];
        
        for (int r=0; r<9; r++){
            for (int c=0; c<9; c++){
                if (initial[r][c]!=0){ 
                    merged_results[r][c] = initial[r][c];
                }
                else merged_results[r][c] = player[r][c];
            }
        }

        return merged_results;
    }
    
    /** The validColumns() function checks the columns of the Sedoku board for valid answers.
     * This function is called by the checkForSuccess() function.
     * @param com
     * @param check
     * @return
     */
    private boolean validColumns(int[][] com, boolean[] check) {
        // check columns
        for (int r=0; r<9; r++){
            
            for (int i=0; i<=9; i++)
                check[i] = false;

            for (int c=0; c<9; c++)
                check[com[r][c]] = true;

            for (int i=1; i<=9; i++)
                if (check[i] == false) 
                    return false;
        }

        return true;
    }
    
    /** The validRows() function checks the rows of the Sedoku board for valid answers.
     * This function is called by the checkForSuccess() function.
     * @param com
     * @param check
     * @return
     */
    private boolean validRows(int[][] com, boolean[] check) {
        // check rows
        for (int c=0; c<9; c++) {
            for (int i=0; i<=9; i++)
                check[i] = false;
            
            for (int r=0; r<9; r++) 
                check[com[r][c]] = true;

            for (int i=1; i<=9; i++)
                if (check[i] == false)
                    return false;
        }

        return true;
    }

    /** The validCells() function checks the cells of the Sedoku board for valid answers.
     * This function is called by the checkForSuccess() function.
     * @param com
     * @param check
     * @return
     */
    private boolean validCells(int[][] com, boolean[] check) {
        // check cells
        for (int i=0; i<7; i+=3){
            for (int j=0; j<7; j+=3){
                
                for (int k=0; k<=9; k++)
                    check[k] = false;

                for (int r=0; r<3; r++)
                     for (int c=0; c<3; c++)
                         check[com[i+r][j+c]] = true;

                for (int k=1; k<=9; k++)
                    if (check[k] == false) 
                        return false;

            }
        }
        
        return true;
    }
}